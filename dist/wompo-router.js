import{createContext as $,defineWompo as S,lazy as H,useCallback as O,useContext as k,useEffect as j,useMemo as W,useState as F,Suspense as v,html as g}from"wompo";const w=(t,e=[],n=null)=>(t.forEach(r=>{if(r instanceof Route.class){const o=r.props,c=o.lazy?H(o.lazy):null,a={...o,parent:n,element:o.element,path:o.path,lazy:c,fallback:o.fallback,index:null,children:[]};o.index&&(n.index=a),e.push(a),w(r.childNodes,a.children,a)}}),e),z=(t,e=[],n="")=>{for(const r of t){let o="";if(r.path){const c=n&&!n.endsWith("/")||!n&&!r.path.startsWith("/")?"/":"";o+=n+c+r.path,e.push([o,r])}r.children&&z(r.children,e,o)}return e},L=t=>{const e=Object.keys(t);return e.sort((n,r)=>{const o=t[n],c=t[r],a=Object.keys(o).filter(s=>s!=="segments").length,u=Object.keys(c).filter(s=>s!=="segments").length-a;if(u===0){let s=n.split("/"),i=r.split("/");const m=i.length-s.length;if(m!==0)return m;let d=0,l=0;for(let h=0;h<s.length;h++){const y=s[h],p=i[h];if(y.startsWith(":")||d++,p.startsWith(":")||l++,y.startsWith(":")||p.startsWith(":")||y.startsWith("*")||p.startsWith("*"))break}return l-d}return u}),t[e[0]]},b=(t,e)=>{const n={exact:null,parametric:{},fallbacks:{}},r=e!=="/"&&e.endsWith("/")?e.substring(0,e.length-1):e;for(const u of t){const[s,i]=u,m=s.endsWith("*");if(!m&&s.split("/").length!==r.split("/").length)continue;if(s===r){n.exact=i;break}if(!s.includes(":")&&!s.includes("*"))continue;const d=s.split("/");let l="";const h=[];for(let R=1;R<d.length;R++){const f=d[R];l+="\\/",f.startsWith(":")?(R===d.length-1?l+="(.*)":l+="(.*?)",h.push(f.substring(1))):f==="*"?(l+="(.*)",h.push("segments")):l+=f}const p=new RegExp(l,"g").exec(r);if(p){const R={};for(let f=1;f<p.length;f++)R[h[f-1]]=p[f];m?n.fallbacks[s]=[i,R]:n.parametric[s]=[i,R]}}const o=Object.keys(n.parametric),c=Object.keys(n.fallbacks);let a=[null,null];n.exact?a=[n.exact,{}]:o.length?a=L(n.parametric):c.length&&(a=L(n.fallbacks));const x=a[0]?.redirect||a[0]?.index?.redirect;if(x){const u=N(e,x);history.replaceState({},void 0,u),a=b(t,u)}return a},N=(t,e)=>e.startsWith("/")?e:t+(t.endsWith("/")||e.startsWith("#")?"":"/")+e,A=t=>t?g`
		<${C.Provider} value=${{...t}}>
			${t.lazy?t.fallback?g`
							<${v} fallback=${t.fallback}>
								<${t.lazy} />
							</${v}>
						`:g`<${t.lazy} />`:t.element}
		</${C.Provider}>
	`:null,P=$({params:null,hash:null,currentRoute:null,setNewRoute:null,routes:[]}),B=t=>{if(t){const e=document.getElementById(t);e&&e.scrollIntoView({block:"start",behavior:"smooth"})}};export function Routes({children:t}){const[e,n]=F(window.location.pathname),r=O((m,d=!0)=>{n(l=>{const h=N(l,m),[y,p]=h.split("#");return d&&l!==h&&(history.pushState({},null,h),p||window.scrollTo(0,0)),B(p),y})}),o=W(()=>w(t.nodes),[]),c=W(()=>z(o),[]);j(()=>{window.addEventListener("popstate",()=>{r(window.location.pathname,!1)}),setTimeout(()=>{B(u.hash)},200)},[]);const[a,x]=b(c,e),u=W(()=>({hash:window.location.hash.split("#")[1],params:x,currentRoute:e,setNewRoute:r,routes:c}),[e]);let s=a??{notFound:!0},i=null;for(s.nextRoute=i;s.parent;)i=s,s=s.parent,s.nextRoute=i;return g`<${P.Provider} value=${u}>
		${s.notFound?g`<div>Not found!</div>`:A(s)}
	</${P.Provider}>`}S(Routes,{name:"womp-routes"});const C=$(null);export function Route({route:t}){return g``}S(Route,{name:"womp-route"});export function ChildRoute(){const t=k(C);let e=null;if(t){const n=t.nextRoute;n?e=n:t.index&&(e=t.index)}return A(e)}S(ChildRoute,{name:"womp-child-route"});const E=(t,e)=>{let n=t;if(!n.startsWith("/")&&!n.startsWith("#")){let r=e;for(;r;){const o=r.path;if(o){const c=o.endsWith("/")?"":"/";n=r.path+c+n}r=r.parent}}return n};export function Link({to:t,children:e}){const n=useNavigate(),r=k(C),o=useRoutes(),c=E(t,r);return g`<a href=${c} @click=${u=>{u.preventDefault(),n(c)}} @mouseenter=${()=>{const[u]=b(o,c.split("#")[0]);u&&u.lazy&&u.lazy()}}>${e}</a>`}Link.css=":host { display: inline-block; }",S(Link,{name:"womp-link"});export function NavLink({to:t,children:e}){const n=useNavigate(),r=useCurrentRoute(),o=useRoutes(),c=k(C),a=E(t,c);return g`<a
		class=${r===a&&"active"}
		href=${a}
		@click=${i=>{i.preventDefault(),n(a)}}
		@mouseenter=${()=>{const[i]=b(o,a.split("#")[0]);i&&i.lazy&&i.lazy()}}
	>
		${e}
	</a>`}NavLink.css=":host { display: inline-block; }",S(NavLink,{name:"womp-nav-link"});export const useParams=()=>k(P).params,useNavigate=()=>k(P).setNewRoute,useCurrentRoute=()=>k(P).currentRoute,useRoutes=()=>k(P).routes;
